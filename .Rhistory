#knitr::opts_chunk$set(echo = TRUE)
# edited line below to help with saving plots as .png files;
knitr::opts_chunk$set(echo = TRUE, dev = c('png', 'pdf'),fig.align = 'center')
library(here)
library(langcog)   #install.packages("devtools"); devtools::install_github("langcog/langcog")
library(Hmisc) # --- could use this for alt. bootstrapping fns
# added 9-27-19 - I
library(stringr) #processing strings
library(compute.es) #for calculating effect sizes
library(lme4)
#library(regex)
#added 9-27-19 - II
# install.packages(c("skimr", "visdat", "summarytools", "DT"))
library(skimr)
library(visdat)
library(summarytools)  # must have XQuartz installed
# getting following error: package ‘summarytools’ was built under R version 3.5.2 couldn't connect to display ":0"system has no X11 capabilities, therefore only ascii graphs will be produced by dfSummary()
library(DT)
library(tidyverse)  #note: contains ggplot2, dplyr, tidyr
library(car)
library(lme4)
# STEP 1 #
rawData_wide <- read_csv(here::here("SCIP_adult_study1a_acc-rawData.csv"))
head(rawData_wide)
#(a) selecting subset of columns needed for calculating accuracy per trial
# # Use this to positively select req. cols if working directly off qualtrics output csv with many extraneous cols:
cleanData_wide = rawData_wide %>%
select(subjectNum,ends_with("_1")) %>%
mutate(G2_correct = "left", R3_correct = "right",
R2_correct = "right", CrB_correct = "left",
R1_correct = "right", G1_correct = "left",
CrA_correct = "right", R4_correct = "left") %>%
mutate(subjectNum = factor(subjectNum))
#replace '-' with '_', etc.
colnames(cleanData_wide) <- colnames(cleanData_wide) %>%
str_replace("-", "_") %>%
str_replace("_.._1","_chosen")
df.long <- cleanData_wide %>%
gather(trial, value, -subjectNum) %>%
arrange(subjectNum,trial) %>%
separate(trial, into = c("trial", "variable")) %>%
spread(variable, value) %>%
mutate(chosen = ifelse(chosen =="On","left","right")) %>%
mutate(acc = ifelse(chosen==correct,1,0)) %>%
mutate(blockNum = ifelse(trial %in% c("G2","R3","R2","CrB"),1,2))
# add trialType info (recap, crit, gen)
# credit: Tobias Gerstenberg
longData = df.long %>%
mutate(trialType = "critical",
trialType = ifelse(str_detect(trial, "G"), "gen", trialType),
trialType = ifelse(str_detect(trial, "R"), "recap", trialType))
# saving tidied up data in long form:
#write.csv(longData,file="SCIP-MT-study1a_acc-cleanData_long.csv")
ms <- longData %>%
group_by(trial, subjectNum) %>%
summarise(acc = mean(acc)) %>%
multi_boot_standard(col = "acc") %>%
mutate(colorindex = str_sub(trial, end = -2), #??
colorindex = factor(colorindex,
levels = c("Cr", "G", "R"),
labels = c("critical", "generalization", "recap")))
ggplot(ms, aes(x = trial, y = mean, fill = colorindex)) +
geom_pointrange(aes(ymin = ci_lower, ymax = ci_upper),
shape = 21,  # fillable circles
size = 1) +
geom_hline(yintercept = .5, lty = 2) +
labs(fill = "Trial Type",
x = "Trial",
y = "Proportion Correct") +
ylim(0, 1) +
theme_classic() +
scale_fill_brewer(palette = "Set1") +
theme(text = element_text(size = 20))
#ggsave("SCIP1a_acc-by-trial.png")
#knitr::opts_chunk$set(echo = TRUE)
# edited line below to help with saving plots as .png files;
knitr::opts_chunk$set(echo = TRUE, dev = c('png', 'pdf'),fig.align = 'center')
library(here)
library(langcog)   #install.packages("devtools"); devtools::install_github("langcog/langcog")
library(Hmisc) # --- could use this for alt. bootstrapping fns
# added 9-27-19 - I
library(stringr) #processing strings
library(compute.es) #for calculating effect sizes
library(lme4)
#library(regex)
#added 9-27-19 - II
# install.packages(c("skimr", "visdat", "summarytools", "DT"))
library(skimr)
library(visdat)
library(summarytools)  # must have XQuartz installed
# getting following error: package ‘summarytools’ was built under R version 3.5.2 couldn't connect to display ":0"system has no X11 capabilities, therefore only ascii graphs will be produced by dfSummary()
library(DT)
library(tidyverse)  #note: contains ggplot2, dplyr, tidyr
library(car)
library(lme4)
# STEP 1 #
d_raw <- read_csv(here::here("SCIP_summer-pilot_data_ALL.csv"))
View(df.long)
by_Cr_R <- longData %>%
mutate(type = str_sub(trial, start = 1, end = 1)) %>%
filter(type != "G") %>%
group_by(subjectNum, type) %>%
summarise(acc = mean(acc)) %>%
ungroup %>%
mutate(type = factor(type, levels = c("C", "R"))) %>%
spread(type, acc)
#correlation b/w recap performance and critical trial performance
cor.test(by_Cr_R$C, by_Cr_R$R)
# df with critical and inner-recap trial acc per participant
by_Cr_IR <- longData %>%
mutate(type = str_sub(trial, start = 1, end = 1)) %>%
filter(trial = "R2") %>%
filter(trial = "R3") %>%   # I'm sure I can be more efficient here :)
group_by(subjectNum, type) %>%
summarise(acc = mean(acc)) %>%
ungroup %>%
mutate(type = factor(type, levels = c("C", "R"))) %>%
spread(type, acc)
# df with critical and inner-recap trial acc per participant
by_Cr_IR <- longData %>%
mutate(type = str_sub(trial, start = 1, end = 1)) %>%
filter(trial == "R2") %>%
filter(trial == "R3") %>%   # I'm sure I can be more efficient here :)
group_by(subjectNum, type) %>%
summarise(acc = mean(acc)) %>%
ungroup %>%
mutate(type = factor(type, levels = c("C", "R"))) %>%
spread(type, acc)
