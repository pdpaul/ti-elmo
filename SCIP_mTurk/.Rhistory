mutate(type = str_sub(trial, start = 1, end = 1)) %>%
filter(type != "G") %>%
filter(trial != "R1") %>%
filter(trial != "R4") %>%   # I'm sure I can be more efficient here :)
group_by(subjectNum, type) %>%
summarise(acc = mean(acc)) %>%
ungroup %>%
mutate(type = factor(type, levels = c("C", "R"),
labels = c("Critical", "Inner-recap")))
fit2 <- lm(type~acc,data = by_cr_InnerR)
by_cr_InnerR <- dfs %>%
mutate(type = str_sub(trial, start = 1, end = 1)) %>%
filter(type != "G") %>%
filter(trial != "R1") %>%
filter(trial != "R4") %>%   # I'm sure I can be more efficient here :)
group_by(subjectNum, type) %>%
summarise(acc = mean(acc)) %>%
ungroup %>%
mutate(type = factor(type, levels = c("C", "R")))
fit2 <- lm(type~acc,data = by_cr_InnerR)
plot(type~acc, data = by_cr_InnerR)
plot(acc~type, data = by_cr_InnerR)
plot(acc~type, data = by_cr_InnerR, xlab = "trial type", ylab = "accuracy" )
by_cr_InnerR <- dfs %>%
mutate(type = str_sub(trial, start = 1, end = 1)) %>%
filter(type != "G") %>%
filter(trial != "R1") %>%
filter(trial != "R4") %>%   # I'm sure I can be more efficient here :)
group_by(subjectNum, type) %>%
summarise(acc = mean(acc)) %>%
ungroup %>%
mutate(type = factor(type, levels = c("C", "R"))) %>%
ggplot(aes(x=type, y=acc)) +
geom_point(size=2, shape=23)
by_cr_InnerR <- dfs %>%
mutate(type = str_sub(trial, start = 1, end = 1)) %>%
filter(type != "G") %>%
filter(trial != "R1") %>%
filter(trial != "R4") %>%   # I'm sure I can be more efficient here :)
group_by(subjectNum, type) %>%
summarise(acc = mean(acc)) %>%
ungroup %>%
mutate(type = factor(type, levels = c("C", "R")))
ggplot(aes(x=type, y=acc)) +
geom_point(size=2, shape=23)
ggplot(by_cr_InnerR, aes(x=type, y=acc)) +
geom_point(size=2, shape=23)
plot(subjectNum~acc, data = by_cr_InnerR, xlab = "trial type", ylab = "accuracy" )
plot(subjectNum~acc, data = by_cr_InnerR, xlab = "participant", ylab = "accuracy" )
plot(acc~subjectNum, data = by_cr_InnerR, xlab = "participant", ylab = "accuracy" )
plot(trial:acc~subjectNum, data = by_cr_InnerR, xlab = "participant", ylab = "accuracy" )
ggplot(by_cr_InnerR, aes(x=type, y=acc)) +
geom_point()+
geom_smooth()
plot(acc~subjectNum, data = by_cr_InnerR, xlab = "participant", ylab = "accuracy" )
plot(type~acc, data = by_cr_InnerR, xlab = "trial type", ylab = "accuracy" )
by_cr_InnerR <- dfs %>%
mutate(type = str_sub(trial, start = 1, end = 1)) %>%
filter(type != "G") %>%
filter(trial != "R1") %>%
filter(trial != "R4") %>%   # I'm sure I can be more efficient here :)
group_by(subjectNum, type) %>%
summarise(acc = mean(acc)) %>%
ungroup %>%
mutate(type = factor(type, levels = c("C", "R")))
# df with critical and inner-recap trial acc per participant
by_cr_InnerR <- dfs %>%
mutate(type = str_sub(trial, start = 1, end = 1)) %>%
filter(type != "G") %>%
filter(trial != "R1") %>%
filter(trial != "R4") %>%   # I'm sure I can be more efficient here :)
group_by(subjectNum, type) %>%
summarise(acc = mean(acc)) %>%
ungroup %>%
mutate(type = factor(type, levels = c("C", "R"))) %>%
spread(trialType, accuracy)
# df with critical and inner-recap trial acc per participant
by_cr_InnerR <- dfs %>%
mutate(type = str_sub(trial, start = 1, end = 1)) %>%
filter(type != "G") %>%
filter(trial != "R1") %>%
filter(trial != "R4") %>%   # I'm sure I can be more efficient here :)
group_by(subjectNum, type) %>%
summarise(acc = mean(acc)) %>%
ungroup %>%
mutate(type = factor(type, levels = c("C", "R"))) %>%
spread(type, accuracy)
# df with critical and inner-recap trial acc per participant
by_cr_InnerR <- dfs %>%
mutate(type = str_sub(trial, start = 1, end = 1)) %>%
filter(type != "G") %>%
filter(trial != "R1") %>%
filter(trial != "R4") %>%   # I'm sure I can be more efficient here :)
group_by(subjectNum, type) %>%
summarise(acc = mean(acc)) %>%
ungroup %>%
mutate(type = factor(type, levels = c("C", "R"))) %>%
spread(type, acc)
ggplot(by_cr_InnerR, aes(x=type, y=acc)) +
geom_point(size=2, shape=23)
ggplot(by_cr_InnerR, aes(x=C, y=R)) +
geom_point(size=2, shape=23)
ggplot(by_cr_InnerR, aes(x=C, y=R)) +
geom_point(size=2, shape=23) +
geom_smooth(method=lm)
ggplot(by_cr_InnerR, aes(x=C, y=R)) +
geom_point(size=2, shape=21) +
geom_smooth(method=lm)
# redundant with other plots
plot(acc~subjectNum, data = by_cr_InnerR, xlab = "participant", ylab = "accuracy" )
#TODO: plotting critical-trial acc against inner-recap acc
#correlation
cor.test(by_cr_InnerR$C, by_cr_InnerR$R)
# Not quite right
ggplot(by_cr_InnerR, aes(x=C, y=R)) +
geom_line(size=2, shape=21) +
geom_smooth(method=lm)
# Not quite right
ggplot(by_cr_InnerR, aes(x=C, y=R)) +
geom_line(size=2) +
geom_smooth(method=lm)
# Not quite right
ggplot(by_cr_InnerR, aes(x=C, y=R)) +
geom_point(size=2) +
geom_smooth(method=lm)
#correlation
cor.test(by_cr_InnerR$C, by_cr_InnerR$R)
cor(by_cr_InnerR)
scatterplot(C ~ R, data=by_Cr_IR,
xlab="Weight of Car", ylab="Miles Per Gallon",
main="Scatterplot")
library(car)
scatterplot(C ~ R, data=by_Cr_IR,
xlab="Weight of Car", ylab="Miles Per Gallon",
main="Scatterplot")
# df with critical and inner-recap trial acc per participant
by_Cr_IR <- dfs %>%
mutate(type = str_sub(trial, start = 1, end = 1)) %>%
filter(type != "G") %>%
filter(trial != "R1") %>%
filter(trial != "R4") %>%   # I'm sure I can be more efficient here :)
group_by(subjectNum, type) %>%
summarise(acc = mean(acc)) %>%
ungroup %>%
mutate(type = factor(type, levels = c("C", "R"))) %>%
spread(type, acc)
#correlation
cor.test(by_Cr_IR$C, by_Cr_IR$R)
cor(by_Cr_IR)
# Not quite right
ggplot(by_Cr_IR, aes(x=C, y=R)) +
geom_point(size=2) +
geom_smooth(method=lm)
scatterplot(C ~ R, data=by_Cr_IR,
xlab="Weight of Car", ylab="Miles Per Gallon",
main="Scatterplot")
scatterplot(C ~ R, data=by_Cr_IR,
xlab="Accuracy on critical trials", ylab="Accuracy on inner recap trials",
main="Scatterplot")
by_Cr_R <- dfs %>%
mutate(type = str_sub(trial, start = 1, end = 1)) %>%
filter(type != "G") %>%
group_by(subjectNum, type) %>%
summarise(acc = mean(acc)) %>%
ungroup %>%
mutate(type = factor(type, levels = c("C", "R"))) %>%
spread(type, acc)
#correlation b/w recap performance and critical trial performance
cor.test(by_Cr_R$C, by_Cr_R$R)
cor(by_Cr_R)
data <- dfs %>%
mutate(type = str_sub(trial, start = 1, end = 1))
View(data)
data <- dfs %>%
mutate(type = str_sub(trial, start = 1, end = 1))  %>%
glmer(acc ~ trialType + (trialType | subjectNum), data = data, family = “binomial”)
library(lme4)
data <- dfs %>%
mutate(type = str_sub(trial, start = 1, end = 1))  %>%
glmer(acc ~ trialType + (trialType | subjectNum), data = data, family = “binomial”)
glmer(acc ~ trialType + (trialType | subjectNum), data = data, family = “binomial”)
glmer(acc ~ type + (type | subjectNum), data = data, family = “binomial”)
data <- dfs %>%
mutate(type = str_sub(trial, start = 1, end = 1))  %>%
group_by(subjectNum, type) %>%
mutate(type = factor(type, levels = c("C", "G", "R")))
data <- dfs %>%
mutate(type = str_sub(trial, start = 1, end = 1))  %>%
mutate(type = factor(type, levels = c("C", "G", "R")))
glmer(acc ~ type + (type | subjectNum), data = data, family = “binomial”)
data <- dfs %>%
mutate(type = str_sub(trial, start = 1, end = 1))  %>%
mutate(type = factor(type, levels = c("C", "G", "R")))
#Plot figure in file
pdf(file="SCIP_1a_acc-by-type.pdf")
plot(mean~type, data = by_type_block, xlab = "trial type", ylab = "mean accuracy", main="Accuracy by trial type")
dev.off()
knitr::opts_chunk$set(echo = TRUE)
opts_chunk$set(dev = c('pdf', 'png'),
fig.align = 'center', fig.height = 5, fig.width = 8.5,
pdf.options(encoding = "ISOLatin9.enc"))
# chunk below supposed to help with saving plots as .png files;
# not working quite yet
opts_chunk$set(dev = c('pdf', 'png'),fig.align = 'center', fig.height = 5, fig.width = 8.5, pdf.options(encoding = "ISOLatin9.enc"))
# chunk below supposed to help with saving plots as .png files;
# not working quite yet
knitr::opts_chunk$set(echo = TRUE, dev = c('pdf', 'png'),fig.align = 'center', fig.height = 5, fig.width = 8.5, pdf.options(encoding = "ISOLatin9.enc"))
#knitr::opts_chunk$set(echo = TRUE)
# chunk below supposed to help with saving plots as .png files;
# not working quite yet
knitr::opts_chunk$set(echo = TRUE, dev = c('pdf', 'png'),fig.align = 'center', fig.height = 5, fig.width = 8.5, pdf.options(encoding = "ISOLatin9.enc"))
# trying to save plot:
pdf(file="SCIP_1a_acc-by-type.pdf")
plot(mean~type, data = by_type_block, xlab = "trial type", ylab = "mean accuracy", main="Accuracy by trial type")
dev.off()
# trying to save plot:
png(file="SCIP_1a_acc-by-type.pdf")
plot(mean~type, data = by_type_block, xlab = "trial type", ylab = "mean accuracy", main="Accuracy by trial type")
dev.off()
# chunk below supposed to help with saving plots as .png files;
# not working quite yet
knitr::opts_chunk$set(echo = TRUE, dev = c('png', 'pdf'),fig.align = 'center', fig.height = 5, fig.width = 8.5, pdf.options(encoding = "ISOLatin9.enc"))
# trying to save plot:
png(file="SCIP_1a_acc-by-type.png")
plot(mean~type, data = by_type_block, xlab = "trial type", ylab = "mean accuracy", main="Accuracy by trial type")
dev.off()
# boxplot of accuracy as a function of trial type
plot(mean~type, data = by_type_block, xlab = "trial type", ylab = "mean accuracy", main="Accuracy by trial type")
# chunk below supposed to help with saving plots as .png files;
# not working quite yet
knitr::opts_chunk$set(echo = TRUE, dev = c('png', 'pdf'),fig.align = 'center', fig.width=6, fig.height=6))
# chunk below supposed to help with saving plots as .png files;
# not working quite yet
knitr::opts_chunk$set(echo = TRUE, dev = c('png', 'pdf'),fig.align = 'center', fig.width=6, fig.height=6)
library(here)
library(langcog)   #install.packages("devtools"); devtools::install_github("langcog/langcog")
library(Hmisc) # --- could use this for alt. bootstrapping fns in multi_boot_standard doesn't work
# added 9-27-19 - I
library(stringr) #processing strings
library(compute.es) #for calculating effect sizes
library(lme4)
#library(regex)
#added 9-27-19 - II
# install.packages(c("skimr", "visdat", "summarytools", "DT"))
library(skimr)
library(visdat)
library(summarytools)  # must have XQuartz installed
# getting following error: package ‘summarytools’ was built under R version 3.5.2 couldn't connect to display ":0"system has no X11 capabilities, therefore only ascii graphs will be produced by dfSummary()
library(DT)
library(tidyverse)  #note: contains ggplot2, dplyr, tidyr
library(car)
library(lme4)
df <- read_csv(here::here("SCIP_adult_study1a_acc-rawData.csv"))  %>% # 8 new cols added (total:1+16+8)
mutate(G2_correct = "left",
R3_correct = "right",
R2_correct = "right",
CrB_correct = "left",
R1_correct = "right",
G1_correct = "left",
CrA_correct = "right",
R4_correct = "left")  %>%
select(-contains("_2"))  # drop _2 as that's the right side (total cols:1+8+8)
dfg <- df %>%
gather(variable, value, `G2-PG_1`:R4_correct) %>%  # puts cols 2:9 (On/Off "responses") in 'variable' col,
# next 8 (correct) in 'value' column
mutate(variable = str_replace(variable, "-", "_")) %>% # deal with naming issue
separate(variable, into = c("trial", "variable")) # splits values in 'variable' by '_'
# So if variable[i] is originally "G3_PG",
# *new* trial[i] is "G3" and variable[i] is "PG" (!!)
# Will splitting only work with underscores?
dfm <- dfg %>% # replaces jar-config codes in first half of 'variable' col ("PG", etc.) with "chosen"
mutate(variable = ifelse(variable == "correct", "correct", "chosen"))
# Notes: this leaves "correct" vals in latter half of 'variable' col untouched
dfs <- dfm %>%
spread(variable, value) %>%   # inverse of gather (how does it figure out *how* to spread specified data?)
mutate(chosen = ifelse(chosen=="On", "left", "right")) %>% # mapping from "On"/"Off" --> "left"/"right"
#mutate(acc = chosen == correct) %>%                        # no parens??
mutate(acc = ifelse(chosen==correct,1,0)) %>% # would like to be able to count correct responses
mutate(blockNum = ifelse(trial %in% c("G2","R3","R2","CrB"),1,2)) # adding block number (1,2)
ms <- dfs %>%
group_by(trial, subjectNum) %>%
summarise(acc = mean(acc)) %>%
multi_boot_standard(col = "acc") %>%
mutate(colorindex = str_sub(trial, end = -2), #??
colorindex = factor(colorindex,
levels = c("Cr", "G", "R"),
labels = c("critical", "generalization", "recap")))
ggplot(ms, aes(x = trial, y = mean, fill = colorindex)) +
geom_pointrange(aes(ymin = ci_lower, ymax = ci_upper),
shape = 21,  # fillable circles
size = 1) +
geom_hline(yintercept = .5, lty = 2) +
labs(fill = "Trial Type",
x = "Trial",
y = "Proportion Correct") +
ylim(0,1) +
theme_classic() +
scale_fill_brewer(palette = "Set1") +
theme(text = element_text(size = 20))
by_trial.type <- dfs %>%
mutate(type = str_sub(trial, start = 1, end = 1)) %>%
group_by(type, subjectNum) %>%
summarise(acc = mean(acc)) %>%
multi_boot_standard(col = "acc") %>%
ungroup %>%
mutate(type = factor(type, levels = c("C", "G", "R"),
labels = c("critical", "generalization", "recap")))
ggplot(by_trial.type, aes(x = type, y = mean, fill = type)) +
geom_pointrange(aes(ymin = ci_lower, ymax = ci_upper),
shape = 21,  # fillable circles
size = 1) +
geom_hline(yintercept = .5, lty = 2) +
labs(x = "Trial Type",
y = "Proportion Correct") +
ylim(0,1) +
theme_classic() +
scale_fill_brewer(palette = "Set1") +
theme(text = element_text(size = 20),
legend.position = "none")
ggsave(SCIP_1a_acc-by-trial-type.png)
ms <- dfs %>%
group_by(trial, subjectNum) %>%
summarise(acc = mean(acc)) %>%
multi_boot_standard(col = "acc") %>%
mutate(colorindex = str_sub(trial, end = -2), #??
colorindex = factor(colorindex,
levels = c("Cr", "G", "R"),
labels = c("critical", "generalization", "recap")))
ggplot(ms, aes(x = trial, y = mean, fill = colorindex)) +
geom_pointrange(aes(ymin = ci_lower, ymax = ci_upper),
shape = 21,  # fillable circles
size = 1) +
geom_hline(yintercept = .5, lty = 2) +
labs(fill = "Trial Type",
x = "Trial",
y = "Proportion Correct") +
ylim(0,1) +
theme_classic() +
scale_fill_brewer(palette = "Set1") +
theme(text = element_text(size = 20))
ggsave("SCIP1a_acc-by-trial.png")
by_trial.type <- dfs %>%
mutate(type = str_sub(trial, start = 1, end = 1)) %>%
group_by(type, subjectNum) %>%
summarise(acc = mean(acc)) %>%
multi_boot_standard(col = "acc") %>%
ungroup %>%
mutate(type = factor(type, levels = c("C", "G", "R"),
labels = c("critical", "generalization", "recap")))
ggplot(by_trial.type, aes(x = type, y = mean, fill = type)) +
geom_pointrange(aes(ymin = ci_lower, ymax = ci_upper),
shape = 21,  # fillable circles
size = 1) +
geom_hline(yintercept = .5, lty = 2) +
labs(x = "Trial Type",
y = "Proportion Correct") +
ylim(0,1) +
theme_classic() +
scale_fill_brewer(palette = "Set1") +
theme(text = element_text(size = 20),
legend.position = "none")
ggsave("SCIP1a_acc-by-type.png")
# chunk below supposed to help with saving plots as .png files;
# not working quite yet
knitr::opts_chunk$set(echo = TRUE, dev = c('png', 'pdf'),fig.align = 'center', fig.width=4, fig.height=4)
library(here)
library(langcog)   #install.packages("devtools"); devtools::install_github("langcog/langcog")
library(Hmisc) # --- could use this for alt. bootstrapping fns in multi_boot_standard doesn't work
# added 9-27-19 - I
library(stringr) #processing strings
library(compute.es) #for calculating effect sizes
library(lme4)
#library(regex)
#added 9-27-19 - II
# install.packages(c("skimr", "visdat", "summarytools", "DT"))
library(skimr)
library(visdat)
library(summarytools)  # must have XQuartz installed
# getting following error: package ‘summarytools’ was built under R version 3.5.2 couldn't connect to display ":0"system has no X11 capabilities, therefore only ascii graphs will be produced by dfSummary()
library(DT)
library(tidyverse)  #note: contains ggplot2, dplyr, tidyr
library(car)
library(lme4)
df <- read_csv(here::here("SCIP_adult_study1a_acc-rawData.csv"))  %>% # 8 new cols added (total:1+16+8)
mutate(G2_correct = "left",
R3_correct = "right",
R2_correct = "right",
CrB_correct = "left",
R1_correct = "right",
G1_correct = "left",
CrA_correct = "right",
R4_correct = "left")  %>%
select(-contains("_2"))  # drop _2 as that's the right side (total cols:1+8+8)
dfg <- df %>%
gather(variable, value, `G2-PG_1`:R4_correct) %>%  # puts cols 2:9 (On/Off "responses") in 'variable' col,
# next 8 (correct) in 'value' column
mutate(variable = str_replace(variable, "-", "_")) %>% # deal with naming issue
separate(variable, into = c("trial", "variable")) # splits values in 'variable' by '_'
# So if variable[i] is originally "G3_PG",
# *new* trial[i] is "G3" and variable[i] is "PG" (!!)
# Will splitting only work with underscores?
dfm <- dfg %>% # replaces jar-config codes in first half of 'variable' col ("PG", etc.) with "chosen"
mutate(variable = ifelse(variable == "correct", "correct", "chosen"))
# Notes: this leaves "correct" vals in latter half of 'variable' col untouched
dfs <- dfm %>%
spread(variable, value) %>%   # inverse of gather (how does it figure out *how* to spread specified data?)
mutate(chosen = ifelse(chosen=="On", "left", "right")) %>% # mapping from "On"/"Off" --> "left"/"right"
#mutate(acc = chosen == correct) %>%                        # no parens??
mutate(acc = ifelse(chosen==correct,1,0)) %>% # would like to be able to count correct responses
mutate(blockNum = ifelse(trial %in% c("G2","R3","R2","CrB"),1,2)) # adding block number (1,2)
ms <- dfs %>%
group_by(trial, subjectNum) %>%
summarise(acc = mean(acc)) %>%
multi_boot_standard(col = "acc") %>%
mutate(colorindex = str_sub(trial, end = -2), #??
colorindex = factor(colorindex,
levels = c("Cr", "G", "R"),
labels = c("critical", "generalization", "recap")))
ggplot(ms, aes(x = trial, y = mean, fill = colorindex)) +
geom_pointrange(aes(ymin = ci_lower, ymax = ci_upper),
shape = 21,  # fillable circles
size = 1) +
geom_hline(yintercept = .5, lty = 2) +
labs(fill = "Trial Type",
x = "Trial",
y = "Proportion Correct") +
ylim(0,1) +
theme_classic() +
scale_fill_brewer(palette = "Set1") +
theme(text = element_text(size = 20))
#ggsave("SCIP1a_acc-by-trial.png")
ggsave("SCIP1a_acc-by-trial.png")
by_trial.type <- dfs %>%
mutate(type = str_sub(trial, start = 1, end = 1)) %>%
group_by(type, subjectNum) %>%
summarise(acc = mean(acc)) %>%
multi_boot_standard(col = "acc") %>%
ungroup %>%
mutate(type = factor(type, levels = c("C", "G", "R"),
labels = c("critical", "generalization", "recap")))
ggplot(by_trial.type, aes(x = type, y = mean, fill = type)) +
geom_pointrange(aes(ymin = ci_lower, ymax = ci_upper),
shape = 21,  # fillable circles
size = 1) +
geom_hline(yintercept = .5, lty = 2) +
labs(x = "Trial Type",
y = "Proportion Correct") +
ylim(0,1) +
theme_classic() +
scale_fill_brewer(palette = "Set1") +
theme(text = element_text(size = 20),
legend.position = "none")
ggsave("SCIP1a_acc-by-type.png")
by_block <- dfs %>%
group_by(blockNum,subjectNum) %>%
summarise(acc = mean(acc)) %>%
multi_boot_standard(col = "acc") %>%
ungroup %>%
mutate(blockNum = factor(blockNum, levels = c("1", "2"),
labels = c("Block 1", "Block 2")))
ggplot(by_block, aes(x = blockNum, y = mean)) +
geom_pointrange(aes(ymin = ci_lower, ymax = ci_upper),
shape = 21,  # fillable circles
size = 1) +
geom_hline(yintercept = .5, lty = 2) +
labs(x = "Block Number",
y = "Proportion Correct") +
ylim(0,1) +
theme_classic() +
scale_fill_brewer(palette = "Set1") +
theme(text = element_text(size = 20),
legend.position = "none")
ggsave("SCIP1a_acc-by-block.png")
by_type_block <- dfs %>%
mutate(type = str_sub(trial, start = 1, end = 1)) %>%
group_by(blockNum,type,subjectNum) %>%
summarise(acc = mean(acc)) %>%
multi_boot_standard(col = "acc") %>%
ungroup %>%
mutate(blockNum = factor(blockNum, levels = c("1", "2"),
labels = c("Block 1", "Block 2"))) %>%
mutate(type = factor(type, levels = c("C", "G", "R"),
labels = c("critical", "generalization", "recap")))
# pretty dot plot
ggplot(by_type_block, aes(x = blockNum, y = mean, fill = type)) +
geom_pointrange(aes(ymin = ci_lower, ymax = ci_upper),
shape = 21,  # fillable circles
size = 1,
position = "jitter") +
geom_hline(yintercept = .5, lty = 2) +
labs(fill = "Trial Type",
x = "Block Number",
y = "Proportion Correct") +
ylim(0,1) +
theme_classic() +
scale_fill_brewer(palette = "Set1") +
theme(text = element_text(size = 18))
# boxplot of accuracy as a function of trial type
plot(mean~type, data = by_type_block, xlab = "trial type", ylab = "mean accuracy", main="Accuracy by trial type")
ggsave("SCIP1a_boxplot_acc-by-type.png")
# boxplot of accuracy as a function of block number
plot(mean~blockNum, data = by_type_block, xlab = "block number", ylab = "mean accuracy", main = "Accuracy by block number")
# boxplot of accuracy as a function of trial type
plot(mean~type, data = by_type_block, xlab = "trial type", ylab = "mean accuracy", main="Accuracy by trial type")
ggsave("SCIP1a_boxplot_acc-by-type-by-block.png")
# linear regression
fit1 <- lm(subjectNum~acc,data = by_subject_type)
summary(fit1)
# linear regression
fit1 <- lm(subjectNum~trial|acc,data = by_subject_type)
# linear regression
fit1 <- lm(subjectNum~type|acc,data = by_subject_type)
