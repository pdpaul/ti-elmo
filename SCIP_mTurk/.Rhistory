y = "Proportion Correct") +
ylim(0,1) +
theme_classic() +
scale_fill_brewer(palette = "Set1") +
theme(text = element_text(size = 20),
legend.position = "none")
ggsave("SCIP1a_acc-by-block.png")
by_type_block <- dfs %>%
mutate(type = str_sub(trial, start = 1, end = 1)) %>%
group_by(blockNum,type,subjectNum) %>%
summarise(acc = mean(acc)) %>%
multi_boot_standard(col = "acc") %>%
ungroup %>%
mutate(blockNum = factor(blockNum, levels = c("1", "2"),
labels = c("Block 1", "Block 2"))) %>%
mutate(type = factor(type, levels = c("C", "G", "R"),
labels = c("critical", "generalization", "recap")))
# pretty dot plot
ggplot(by_type_block, aes(x = blockNum, y = mean, fill = type)) +
geom_pointrange(aes(ymin = ci_lower, ymax = ci_upper),
shape = 21,  # fillable circles
size = 1,
position = "jitter") +
geom_hline(yintercept = .5, lty = 2) +
labs(fill = "Trial Type",
x = "Block Number",
y = "Proportion Correct") +
ylim(0,1) +
theme_classic() +
scale_fill_brewer(palette = "Set1") +
theme(text = element_text(size = 18))
# boxplot of accuracy as a function of trial type
plot(mean~type, data = by_type_block, xlab = "trial type", ylab = "mean accuracy", main="Accuracy by trial type")
ggsave("SCIP1a_boxplot_acc-by-type.png")
# boxplot of accuracy as a function of block number
plot(mean~blockNum, data = by_type_block, xlab = "block number", ylab = "mean accuracy", main = "Accuracy by block number")
# boxplot of accuracy as a function of trial type
plot(mean~type, data = by_type_block, xlab = "trial type", ylab = "mean accuracy", main="Accuracy by trial type")
ggsave("SCIP1a_boxplot_acc-by-type-by-block.png")
# linear regression
fit1 <- lm(subjectNum~acc,data = by_subject_type)
summary(fit1)
# linear regression
fit1 <- lm(subjectNum~trial|acc,data = by_subject_type)
# linear regression
fit1 <- lm(subjectNum~type|acc,data = by_subject_type)
#knitr::opts_chunk$set(echo = TRUE)
# edited line below to help with saving plots as .png files;
knitr::opts_chunk$set(echo = TRUE, dev = c('png', 'pdf'),fig.align = 'center', fig.width=4, fig.height=4)
# STEP 1 #
rawData_wide <- read_csv(here::here("SCIP_adult_study1a_acc-rawData.csv"))
#knitr::opts_chunk$set(echo = TRUE)
# edited line below to help with saving plots as .png files;
knitr::opts_chunk$set(echo = TRUE, dev = c('png', 'pdf'),fig.align = 'center')
library(here)
library(langcog)   #install.packages("devtools"); devtools::install_github("langcog/langcog")
library(Hmisc) # --- could use this for alt. bootstrapping fns
# added 9-27-19 - I
library(stringr) #processing strings
library(compute.es) #for calculating effect sizes
library(lme4)
#library(regex)
#added 9-27-19 - II
# install.packages(c("skimr", "visdat", "summarytools", "DT"))
library(skimr)
library(visdat)
library(summarytools)  # must have XQuartz installed
# getting following error: package ‘summarytools’ was built under R version 3.5.2 couldn't connect to display ":0"system has no X11 capabilities, therefore only ascii graphs will be produced by dfSummary()
library(DT)
library(tidyverse)  #note: contains ggplot2, dplyr, tidyr
library(car)
library(lme4)
# STEP 1 #
rawData_wide <- read_csv(here::here("SCIP_adult_study1a_acc-rawData.csv"))
head(rawData_wide)
select(subjectNum,
G2.PG_1,G2.PG_2,
R3.GR_1,R3.GR_2,
R2.BG_1,R2.BG_2,
CrB.RB_1,CrB.RB_2,
R1.YB_1,R1.YB_2,
G1.GY_1,G1.GY_2,
CrA.BR_1,CrA.BR_2,
R4.PR_1,R4.PR_2)
View(rawData_wide)
#(a) selecting subset of columns needed for calculating accuracy per trial
# # Use this to positively select req. cols if working directly off qualtrics output csv with many extraneous cols:
rawData_wide = rawData_wide %>%
select(subjectNum,ends_with("_1"))
#(a) selecting subset of columns needed for calculating accuracy per trial
# # Use this to positively select req. cols if working directly off qualtrics output csv with many extraneous cols:
rawData_wide = rawData_wide %>%
select(subjectNum,ends_with("_1")) %>%
mutate(G2_correct = "left",
R3_correct = "right",
R2_correct = "right",
CrB_correct = "left",
R1_correct = "right",
G1_correct = "left",
CrA_correct = "right",
R4_correct = "left") %>%
mutate(subjectNum = factor(subjectNum)) %>%
mutate(colnames() = str_replace(variable, "-", "_"))
# STEP 1 #
rawData_wide <- read_csv(here::here("SCIP_adult_study1a_acc-rawData.csv"))
head(rawData_wide)
cleanData_wide = rawData_wide %>%
select(subjectNum,ends_with("_1")) %>%
mutate(G2_correct = "left",
R3_correct = "right",
R2_correct = "right",
CrB_correct = "left",
R1_correct = "right",
G1_correct = "left",
CrA_correct = "right",
R4_correct = "left")
View(cleanData_wide)
#(a) selecting subset of columns needed for calculating accuracy per trial
# # Use this to positively select req. cols if working directly off qualtrics output csv with many extraneous cols:
cleanData_wide = rawData_wide %>%
select(subjectNum,ends_with("_1")) %>%
mutate(G2_correct = "left",
R3_correct = "right",
R2_correct = "right",
CrB_correct = "left",
R1_correct = "right",
G1_correct = "left",
CrA_correct = "right",
R4_correct = "left") %>%
mutate(subjectNum = factor(subjectNum)) %>%
clean_wide =  cleanData_wide %>%
gather(trial, correct)
clean_wide =  cleanData_wide %>%
gather(trial, correct)
View(clean_wide)
colnames(cleanData_wide)
#(a) selecting subset of columns needed for calculating accuracy per trial
# # Use this to positively select req. cols if working directly off qualtrics output csv with many extraneous cols:
cleanData_wide = rawData_wide %>%
select(subjectNum,ends_with("_1")) %>%
mutate(G2_correct = "left",
R3_correct = "right",
R2_correct = "right",
CrB_correct = "left",
R1_correct = "right",
G1_correct = "left",
CrA_correct = "right",
R4_correct = "left") %>%
mutate(subjectNum = factor(subjectNum)) %>% #replace '-' with '_'
m <- str_replace(colnames(cleanData_wide), "-", "_"))
m <- str_replace(colnames(cleanData_wide), "-", "_"))
m <- str_replace(colnames(cleanData_wide), "-", "_")
m
colnames(cleanData_wide) <- m
colnames(cleanData_wide)
# STEP 1 #
rawData_wide <- read_csv(here::here("SCIP_adult_study1a_acc-rawData.csv"))
head(rawData_wide)
#(a) selecting subset of columns needed for calculating accuracy per trial
# # Use this to positively select req. cols if working directly off qualtrics output csv with many extraneous cols:
cleanData_wide = rawData_wide %>%
select(subjectNum,ends_with("_1")) %>%
mutate(G2_correct = "left",
R3_correct = "right",
R2_correct = "right",
CrB_correct = "left",
R1_correct = "right",
G1_correct = "left",
CrA_correct = "right",
R4_correct = "left") %>%
mutate(subjectNum = factor(subjectNum))  #replace '-' with '_'
colnames(cleanData_wide) <- str_replace(colnames(cleanData_wide), "-", "_")
clean_wide =  cleanData_wide %>%
gather(trial, correct, -subjectNum)
View(clean_wide)
clean_wide =  cleanData_wide %>%
gather(trial, value, -subjectNum)
spread
clean_wide =  cleanData_wide %>%
gather(trial, value, -subjectNum)
clean_wide =  cleanData_wide %>%
gather(trial, value, -subjectNum) %>%
spread(chosen, correct, value)
# STEP 1 #
rawData_wide <- read_csv(here::here("SCIP_adult_study1a_acc-rawData.csv"))
head(rawData_wide)
#(a) selecting subset of columns needed for calculating accuracy per trial
# # Use this to positively select req. cols if working directly off qualtrics output csv with many extraneous cols:
cleanData_wide = rawData_wide %>%
select(subjectNum,ends_with("_1")) %>%
mutate(G2_correct = "left",
R3_correct = "right",
R2_correct = "right",
CrB_correct = "left",
R1_correct = "right",
G1_correct = "left",
CrA_correct = "right",
R4_correct = "left") %>%
mutate(subjectNum = factor(subjectNum))
#replace '-' with '_'
colnames(cleanData_wide) <- str_replace(colnames(cleanData_wide), "-", "_")
#(a) selecting subset of columns needed for calculating accuracy per trial
# # Use this to positively select req. cols if working directly off qualtrics output csv with many extraneous cols:
cleanData_wide = rawData_wide %>%
select(subjectNum,ends_with("_1")) %>%
mutate(G2_correct = "left",
R3_correct = "right",
R2_correct = "right",
CrB_correct = "left",
R1_correct = "right",
G1_correct = "left",
CrA_correct = "right",
R4_correct = "left") %>%
mutate(subjectNum = factor(subjectNum))
#replace '-' with '_'
colnames(cleanData_wide) <- colnames(cleanData_wide) %>%
str_replace("-", "_") %>%
clean_wide =  cleanData_wide %>%
gather(trial, value, -subjectNum) %>%
spread(chosen, correct, value)
#replace '-' with '_'
colnames(cleanData_wide) <- colnames(cleanData_wide) %>%
str_replace("-", "_") %>%
str_replace("_.._1","_chosen")
df.long <- cleanData_wide %>%
gather(trial, value, -subjectNum)
View(df.long)
# STEP 1 #
rawData_wide <- read_csv(here::here("SCIP_adult_study1a_acc-rawData.csv"))
head(rawData_wide)
#(a) selecting subset of columns needed for calculating accuracy per trial
# # Use this to positively select req. cols if working directly off qualtrics output csv with many extraneous cols:
cleanData_wide = rawData_wide %>%
select(subjectNum,ends_with("_1")) %>%
mutate(G2_correct = "left",
R3_correct = "right",
R2_correct = "right",
CrB_correct = "left",
R1_correct = "right",
G1_correct = "left",
CrA_correct = "right",
R4_correct = "left") %>%
mutate(subjectNum = factor(subjectNum))
#replace '-' with '_', etc.
colnames(cleanData_wide) <- colnames(cleanData_wide) %>%
str_replace("-", "_") %>%
str_replace("_.._1","_chosen")
df.long <- cleanData_wide %>%
gather(trial, value, -subjectNum) %>%
arrange(subjectNum,trial)
df.long <- cleanData_wide %>%
gather(trial, value, -subjectNum) %>%
arrange(subjectNum,trial) %>%
separate(trial, into = c("chosen", "correct"))
# STEP 1 #
rawData_wide <- read_csv(here::here("SCIP_adult_study1a_acc-rawData.csv"))
head(rawData_wide)
#(a) selecting subset of columns needed for calculating accuracy per trial
# # Use this to positively select req. cols if working directly off qualtrics output csv with many extraneous cols:
cleanData_wide = rawData_wide %>%
select(subjectNum,ends_with("_1")) %>%
mutate(G2_correct = "left",
R3_correct = "right",
R2_correct = "right",
CrB_correct = "left",
R1_correct = "right",
G1_correct = "left",
CrA_correct = "right",
R4_correct = "left") %>%
mutate(subjectNum = factor(subjectNum))
#replace '-' with '_', etc.
colnames(cleanData_wide) <- colnames(cleanData_wide) %>%
str_replace("-", "_") %>%
str_replace("_.._1","_chosen")
df.long <- cleanData_wide %>%
gather(trial, value, -subjectNum) %>%
arrange(subjectNum,trial) %>%
separate(trial, into = c("trial", "variable"))
#spread(chosen, correct, value)
## Going to do this AFTER converting to long format
# # <trialname>_chosen:
# mutate(G2_chosen  = ifelse(G2.PG_1=="On","left","right"),
#        R3_chosen  = ifelse(R3.GR_1=="On","left","right"),
#        R2_chosen  = ifelse(R2.BG_1=="On","left","right"),
#        CrB_chosen = ifelse(CrB.RB_1=="On","left","right"),
#        R1_chosen  = ifelse(R1.YB_1=="On","left","right"),
#        G1_chosen  = ifelse(G1.GY_1=="On","left","right"),
#        CrA_chosen = ifelse(CrA.BR_1=="On","left","right"),
#        R4_chosen  = ifelse(R4.PR_1=="On","left","right")) %>%
# # <trialname>_acc:
# mutate(G2_acc = ifelse(G2_chosen==G2_correct, 1, 0),
#        R3_acc = ifelse(R3_chosen==R3_correct, 1, 0),
#        R2_acc = ifelse(R2_chosen==R2_correct, 1, 0),
#        CrB_acc = ifelse(CrB_chosen==CrB_correct, 1, 0),
#        R1_acc = ifelse(R1_chosen==R1_correct, 1, 0),
#        G1_acc = ifelse(G1_chosen==G1_correct, 1, 0),
#        CrA_acc = ifelse(CrA_chosen==CrA_correct, 1, 0),
#        R4_acc = ifelse(R4_chosen==R4_correct, 1, 0))
# optional: save file at this stage, with newly computed columns # write.csv(cleanData_wide,file="SCIP-MT-study1a_acc-cleanData_wide.csv")
# STEP 1 #
rawData_wide <- read_csv(here::here("SCIP_adult_study1a_acc-rawData.csv"))
head(rawData_wide)
#(a) selecting subset of columns needed for calculating accuracy per trial
# # Use this to positively select req. cols if working directly off qualtrics output csv with many extraneous cols:
cleanData_wide = rawData_wide %>%
select(subjectNum,ends_with("_1")) %>%
mutate(G2_correct = "left",
R3_correct = "right",
R2_correct = "right",
CrB_correct = "left",
R1_correct = "right",
G1_correct = "left",
CrA_correct = "right",
R4_correct = "left") %>%
mutate(subjectNum = factor(subjectNum))
#replace '-' with '_', etc.
colnames(cleanData_wide) <- colnames(cleanData_wide) %>%
str_replace("-", "_") %>%
str_replace("_.._1","_chosen")
df.long <- cleanData_wide %>%
gather(trial, value, -subjectNum) %>%
arrange(subjectNum,trial) %>%
separate(trial, into = c("trial", "variable")) %>%
spread(variable, value)
## Going to do this AFTER converting to long format
# # <trialname>_chosen:
# mutate(G2_chosen  = ifelse(G2.PG_1=="On","left","right"),
#        R3_chosen  = ifelse(R3.GR_1=="On","left","right"),
#        R2_chosen  = ifelse(R2.BG_1=="On","left","right"),
#        CrB_chosen = ifelse(CrB.RB_1=="On","left","right"),
#        R1_chosen  = ifelse(R1.YB_1=="On","left","right"),
#        G1_chosen  = ifelse(G1.GY_1=="On","left","right"),
#        CrA_chosen = ifelse(CrA.BR_1=="On","left","right"),
#        R4_chosen  = ifelse(R4.PR_1=="On","left","right")) %>%
# # <trialname>_acc:
# mutate(G2_acc = ifelse(G2_chosen==G2_correct, 1, 0),
#        R3_acc = ifelse(R3_chosen==R3_correct, 1, 0),
#        R2_acc = ifelse(R2_chosen==R2_correct, 1, 0),
#        CrB_acc = ifelse(CrB_chosen==CrB_correct, 1, 0),
#        R1_acc = ifelse(R1_chosen==R1_correct, 1, 0),
#        G1_acc = ifelse(G1_chosen==G1_correct, 1, 0),
#        CrA_acc = ifelse(CrA_chosen==CrA_correct, 1, 0),
#        R4_acc = ifelse(R4_chosen==R4_correct, 1, 0))
# optional: save file at this stage, with newly computed columns # write.csv(cleanData_wide,file="SCIP-MT-study1a_acc-cleanData_wide.csv")
# STEP 1 #
rawData_wide <- read_csv(here::here("SCIP_adult_study1a_acc-rawData.csv"))
head(rawData_wide)
#(a) selecting subset of columns needed for calculating accuracy per trial
# # Use this to positively select req. cols if working directly off qualtrics output csv with many extraneous cols:
cleanData_wide = rawData_wide %>%
select(subjectNum,ends_with("_1")) %>%
mutate(G2_correct = "left",
R3_correct = "right",
R2_correct = "right",
CrB_correct = "left",
R1_correct = "right",
G1_correct = "left",
CrA_correct = "right",
R4_correct = "left") %>%
mutate(subjectNum = factor(subjectNum))
#replace '-' with '_', etc.
colnames(cleanData_wide) <- colnames(cleanData_wide) %>%
str_replace("-", "_") %>%
str_replace("_.._1","_chosen")
df.long <- cleanData_wide %>%
gather(trial, value, -subjectNum) %>%
arrange(subjectNum,trial) %>%
separate(trial, into = c("trial", "variable")) %>%
spread(variable, value) %>%
mutate(chosen = ifelse("On","left","right")) %>%
mutate(acc = ifelse(chosen==correct,1,0)) %>% #
mutate(blockNum = ifelse(trial %in% c("G2","R3","R2","CrB"),1,2))
## Going to do this AFTER converting to long format
# # <trialname>_chosen:
# mutate(G2_chosen  = ifelse(G2.PG_1=="On","left","right"),
#        R3_chosen  = ifelse(R3.GR_1=="On","left","right"),
#        R2_chosen  = ifelse(R2.BG_1=="On","left","right"),
#        CrB_chosen = ifelse(CrB.RB_1=="On","left","right"),
#        R1_chosen  = ifelse(R1.YB_1=="On","left","right"),
#        G1_chosen  = ifelse(G1.GY_1=="On","left","right"),
#        CrA_chosen = ifelse(CrA.BR_1=="On","left","right"),
#        R4_chosen  = ifelse(R4.PR_1=="On","left","right")) %>%
# # <trialname>_acc:
# mutate(G2_acc = ifelse(G2_chosen==G2_correct, 1, 0),
#        R3_acc = ifelse(R3_chosen==R3_correct, 1, 0),
#        R2_acc = ifelse(R2_chosen==R2_correct, 1, 0),
#        CrB_acc = ifelse(CrB_chosen==CrB_correct, 1, 0),
#        R1_acc = ifelse(R1_chosen==R1_correct, 1, 0),
#        G1_acc = ifelse(G1_chosen==G1_correct, 1, 0),
#        CrA_acc = ifelse(CrA_chosen==CrA_correct, 1, 0),
#        R4_acc = ifelse(R4_chosen==R4_correct, 1, 0))
# optional: save file at this stage, with newly computed columns # write.csv(cleanData_wide,file="SCIP-MT-study1a_acc-cleanData_wide.csv")
# STEP 1 #
rawData_wide <- read_csv(here::here("SCIP_adult_study1a_acc-rawData.csv"))
head(rawData_wide)
#(a) selecting subset of columns needed for calculating accuracy per trial
# # Use this to positively select req. cols if working directly off qualtrics output csv with many extraneous cols:
cleanData_wide = rawData_wide %>%
select(subjectNum,ends_with("_1")) %>%
mutate(G2_correct = "left",
R3_correct = "right",
R2_correct = "right",
CrB_correct = "left",
R1_correct = "right",
G1_correct = "left",
CrA_correct = "right",
R4_correct = "left") %>%
mutate(subjectNum = factor(subjectNum))
#replace '-' with '_', etc.
colnames(cleanData_wide) <- colnames(cleanData_wide) %>%
str_replace("-", "_") %>%
str_replace("_.._1","_chosen")
df.long <- cleanData_wide %>%
gather(trial, value, -subjectNum) %>%
arrange(subjectNum,trial) %>%
separate(trial, into = c("trial", "variable")) %>%
spread(variable, value) %>%
mutate(chosen = ifelse("On","left","right"))
View(df.long)
# STEP 1 #
rawData_wide <- read_csv(here::here("SCIP_adult_study1a_acc-rawData.csv"))
head(rawData_wide)
#(a) selecting subset of columns needed for calculating accuracy per trial
# # Use this to positively select req. cols if working directly off qualtrics output csv with many extraneous cols:
cleanData_wide = rawData_wide %>%
select(subjectNum,ends_with("_1")) %>%
mutate(G2_correct = "left",
R3_correct = "right",
R2_correct = "right",
CrB_correct = "left",
R1_correct = "right",
G1_correct = "left",
CrA_correct = "right",
R4_correct = "left") %>%
mutate(subjectNum = factor(subjectNum))
#replace '-' with '_', etc.
colnames(cleanData_wide) <- colnames(cleanData_wide) %>%
str_replace("-", "_") %>%
str_replace("_.._1","_chosen")
df.long <- cleanData_wide %>%
gather(trial, value, -subjectNum) %>%
arrange(subjectNum,trial) %>%
separate(trial, into = c("trial", "variable")) %>%
spread(variable, value) %>%
mutate(chosen = ifelse(chosen =="On","left","right"))
# STEP 1 #
rawData_wide <- read_csv(here::here("SCIP_adult_study1a_acc-rawData.csv"))
head(rawData_wide)
library(here)
library(langcog)   #install.packages("devtools"); devtools::install_github("langcog/langcog")
library(Hmisc) # --- could use this for alt. bootstrapping fns
# added 9-27-19 - I
library(stringr) #processing strings
library(compute.es) #for calculating effect sizes
library(lme4)
#library(regex)
#added 9-27-19 - II
# install.packages(c("skimr", "visdat", "summarytools", "DT"))
library(skimr)
library(visdat)
library(summarytools)  # must have XQuartz installed
# getting following error: package ‘summarytools’ was built under R version 3.5.2 couldn't connect to display ":0"system has no X11 capabilities, therefore only ascii graphs will be produced by dfSummary()
library(DT)
library(tidyverse)  #note: contains ggplot2, dplyr, tidyr
library(car)
library(lme4)
# STEP 1 #
rawData_wide <- read_csv(here::here("SCIP_adult_study1a_acc-rawData.csv"))
head(rawData_wide)
# STEP 1 #
rawData_wide <- read_csv(here::here("SCIP_adult_study1a_acc-rawData.csv"))
head(rawData_wide)
cleanData_wide = rawData_wide %>%
select(subjectNum,ends_with("_1")) %>%
mutate(G2_correct = "left", R3_correct = "right",
R2_correct = "right", CrB_correct = "left",
R1_correct = "right", G1_correct = "left",
CrA_correct = "right", R4_correct = "left") %>%
mutate(subjectNum = factor(subjectNum))
#replace '-' with '_', etc.
colnames(cleanData_wide) <- colnames(cleanData_wide) %>%
str_replace("-", "_") %>%
str_replace("_.._1","_chosen")
df.long <- cleanData_wide %>%
gather(trial, value, -subjectNum) %>%
arrange(subjectNum,trial) %>%
separate(trial, into = c("trial", "variable")) %>%
spread(variable, value) %>%
mutate(chosen = ifelse(chosen =="On","left","right")) %>%
mutate(acc = ifelse(chosen==correct,1,0)) %>%
mutate(blockNum = ifelse(trial %in% c("G2","R3","R2","CrB"),1,2))
# add trialType info (recap, crit, gen)
# credit: Tobias Gerstenberg
longData = df.long %>%
mutate(trialType = "critical",
trialType = ifelse(str_detect(trial, "G"), "gen", trialType),
trialType = ifelse(str_detect(trial, "R"), "recap", trialType))
View(longData)
# saving tidied up data in long form (finally!)
write.csv(longData,file="SCIP-MT-study1a_acc-cleanData_long.csv")
by_Cr_R <- longData %>%
mutate(type = str_sub(trial, start = 1, end = 1))
# df with critical and inner-recap trial acc per participant
by_Cr_IR <- longData %>%
mutate(type = str_sub(trial, start = 1, end = 1)) %>%
filter(trial = "R2") %>%
filter(trial = "R3") %>%   # I'm sure I can be more efficient here :)
group_by(subjectNum, type) %>%
summarise(acc = mean(acc)) %>%
ungroup %>%
mutate(type = factor(type, levels = c("C", "R"))) %>%
spread(type, acc)
